AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  InstanceType:
    Type: String
    Default: c5.xlarge
  ImageId:
    Type: String
    Default: ami-0fb7513bcdc525c3b
  NumInstances:
    Type: Number
    Default: 2
  NumThreads:
    Type: Number
    Default: 4
  HarnessUrl:
    Type: String
    Default: https://github.com/benjaminkoffel/afl-aws/raw/master/examples/libpng/libpng.amz2.tar.gz
  VpcId:
    Type: String
  SubnetId:
    Type: String
  SshKeyName:
    Type: String
  SshCidrIp:
    Type: String
Resources:
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref SubnetId
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Ref NumInstances
      MaxSize: !Ref NumInstances
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      SecurityGroups: 
        - !Ref InstanceSecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
      AssociatePublicIpAddress: true
      KeyName: !Ref SshKeyName
      UserData:
        Fn::Base64:
          !Sub |
            #!/usr/bin/env bash
            set -euxo pipefail
            yum install -y amazon-efs-utils awscli gcc gcc-c++ make
            mkdir /mnt/efs
            mount -t efs ${FileSystem}:/ /mnt/efs
            mkdir -p /mnt/efs/output
            cd /opt
            wget http://lcamtuf.coredump.cx/afl/releases/afl-2.52b.tgz
            tar -xzf afl-2.52b.tgz
            cd afl-2.52b
            make
            cd /opt
            wget -O harness.tar.gz ${HarnessUrl}
            tar -xzvf harness.tar.gz
            instance=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            for i in {1..${NumThreads}}
            do 
              nohup /opt/afl-2.52b/afl-fuzz -i /opt/input -o /mnt/efs/output -S "$instance-$i" /opt/harness &
            done
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Instance security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SshCidrIp
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Role
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties: 
      Encrypted: false
  MountTarget: 
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref SubnetId
      SecurityGroups: 
        - !Ref FileSystemSecurityGroup
  FileSystemSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: File system security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId:
            Fn::GetAtt:
              - InstanceSecurityGroup
              - GroupId
